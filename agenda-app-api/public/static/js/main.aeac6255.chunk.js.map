{"version":3,"sources":["redux/tasks.ts","redux/ui.ts","components/ColorSelector.tsx","components/AddTaskFormContainer.tsx","redux/users.ts","components/Header.tsx","components/LoginPopupContainer.tsx","components/schedule/ScheduleItem.tsx","components/schedule/ScheduleColumn.tsx","components/schedule/ScheduleContainer.tsx","components/schedule/ScheduleNavigator.tsx","components/TaskItemPopupContainer.tsx","App.tsx","redux/store.ts","reportWebVitals.ts","index.tsx"],"names":["tasksSliceInitialState","currentDate","dayjs","format","currentTasks","fetchCurrentDateTasks","createAsyncThunk","dateString","a","console","log","axios","get","res","data","addOneTask","task","post","updateOneTask","id","Error","patch","tasksSlice","createSlice","name","initialState","reducers","setDate","state","action","payload","extraReducers","builder","addCase","fulfilled","taskPayload","date","day","substring","isSame","subtract","push","payloadTask","map","actions","uiSlice","addTaskPopupOn","taskItemPopupOn","loginPopupOn","taskItemPopup","resume","color","details","done","toggleAddTaskPopup","toggleTaskItemPopup","setTaskItem","setLoginPopupOn","ColorSelector","customOnClick","initColor","onClick","ev","target","classList","contains","parentElement","Array","from","children","remove","add","className","AddTaskFormContainer","useForm","register","handleSubmit","useSelector","tasks","dispatch","useDispatch","useState","taskColor","setTaskColor","onMouseDown","onSubmit","newTask","type","placeholder","defaultValue","usersSlice","isLogIn","username","setIsLogin","Header","Button","variant","e","then","catch","err","error","LoginPopupContainer","errorMess","setErrorMess","loginFormSubmitHandler","password","ScheduleItem","ScheduleColumn","dayIdentifier","tasksCollapsed","setTasksCollapsed","useEffect","ScheduleContainer","users","getDayInfo","dayIndex","Paper","filter","ScheduleNavigator","DatePicker","value","onChange","targetdate","Date","now","TaskItemPopupContainer","ui","taskResume","setTaskResume","taskDate","setTaskDate","taskDetails","setTaskDetails","taskDone","setTaskDone","preventDefault","htmlFor","checked","App","checkIfConnected","store","configureStore","reducer","tasksReducer","uiReducer","usersReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","utils","dayjsUtils","document","getElementById"],"mappings":"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","file":"static/js/main.aeac6255.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport interface ITask {\r\n    id?: number;\r\n    date: string;\r\n    details: string;\r\n    resume: string;\r\n    color: string;\r\n    done: boolean;\r\n}\r\n\r\nconst tasksSliceInitialState: {\r\n    currentDate: string;\r\n    currentTasks: ITask[];\r\n} = {\r\n    currentDate: dayjs().format(\"YYYY-MM-DD\"),\r\n    currentTasks: [],\r\n};\r\n\r\nexport const fetchCurrentDateTasks = createAsyncThunk(\r\n    \"tasks/fetchCurrentDateTasks\",\r\n    async (dateString: string) => {\r\n        console.log(\"api call for fetch tasks\");\r\n\r\n        const res = await axios.get(\r\n            `/api/tasks/week?date=${dayjs(dateString).format(\"YYYY-MM-DD\")}`\r\n        );\r\n\r\n        console.log(res.data);\r\n\r\n        return res.data;\r\n    }\r\n);\r\n\r\nexport const addOneTask = createAsyncThunk(\r\n    \"tasks/addOneTask\",\r\n    async (task: ITask) => {\r\n        console.log(\"api call for add one task\");\r\n\r\n        const res = await axios.post(`/api/tasks`, task);\r\n\r\n        return res.data;\r\n    }\r\n);\r\n\r\nexport const updateOneTask = createAsyncThunk(\r\n    \"tasks/updateOneTask\",\r\n    async (task: ITask) => {\r\n        if (!task.id) {\r\n            throw new Error(\"ITask objects needed ID for update request\");\r\n        }\r\n\r\n        const res = await axios.patch(\"/api/tasks\", task);\r\n        return res.data;\r\n    }\r\n);\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: tasksSliceInitialState,\r\n    reducers: {\r\n        setDate: (state, action: PayloadAction<string>) => {\r\n            state.currentDate = action.payload;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchCurrentDateTasks.fulfilled, (state, action) => {\r\n            state.currentTasks = action.payload;\r\n        });\r\n\r\n        builder.addCase(addOneTask.fulfilled, (state, action) => {\r\n            const taskPayload: ITask = action.payload;\r\n\r\n            // les semaines commenceant à dimanche dans le programme, il faut\r\n            // - un check supplémentaire\r\n            // TODO horaire quebec : il y a un bug avec l'actualisation des currentTasks coté qc ):\r\n            if (dayjs(taskPayload.date).day() === 0) {\r\n                if (\r\n                    dayjs(`${state.currentDate.substring(0, 10)} 00:00`).isSame(\r\n                        dayjs(\r\n                            `${taskPayload.date.substring(0, 10)} 00:00`\r\n                        ).subtract(1, \"day\"),\r\n                        \"week\"\r\n                    )\r\n                ) {\r\n                    state.currentTasks.push(taskPayload);\r\n                }\r\n            } else {\r\n                // si la tache ajoutée est de la même semaine que nous, alors\r\n                // - on l'ajoute dans currentTasks\r\n                if (\r\n                    dayjs(`${state.currentDate.substring(0, 10)} 00:00`).isSame(\r\n                        taskPayload.date,\r\n                        \"week\"\r\n                    )\r\n                ) {\r\n                    state.currentTasks.push(taskPayload);\r\n                }\r\n            }\r\n        });\r\n\r\n        builder.addCase(updateOneTask.fulfilled, (state, action): any => {\r\n            const payloadTask: ITask = action.payload;\r\n            state.currentTasks = state.currentTasks.map((task) => {\r\n                if (task.id === payloadTask.id) {\r\n                    return payloadTask;\r\n                }\r\n\r\n                return task;\r\n            });\r\n        });\r\n    },\r\n});\r\n\r\nexport const { setDate } = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { ITask } from \"./tasks\";\r\n\r\nconst uiSliceInitialstate: {\r\n    addTaskPopupOn: boolean;\r\n    taskItemPopupOn: boolean;\r\n    loginPopupOn: boolean;\r\n    taskItemPopup: ITask;\r\n} = {\r\n    addTaskPopupOn: false,\r\n    taskItemPopupOn: false,\r\n    loginPopupOn: false,\r\n    taskItemPopup: {\r\n        resume: \"none\",\r\n        color: \"none\",\r\n        date: \"none\",\r\n        details: \"none\",\r\n        done: false,\r\n    },\r\n};\r\n\r\nexport const uiSlice = createSlice({\r\n    name: \"ui\",\r\n    initialState: uiSliceInitialstate,\r\n    reducers: {\r\n        toggleAddTaskPopup: (state) => {\r\n            state.addTaskPopupOn = !state.addTaskPopupOn;\r\n        },\r\n        toggleTaskItemPopup: (state) => {\r\n            state.taskItemPopupOn = !state.taskItemPopupOn;\r\n        },\r\n        setTaskItem: (state, action: PayloadAction<ITask>) => {\r\n            state.taskItemPopup = action.payload;\r\n        },\r\n        setLoginPopupOn: (state, action: PayloadAction<boolean>) => {\r\n            state.loginPopupOn = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    setLoginPopupOn,\r\n    toggleAddTaskPopup,\r\n    toggleTaskItemPopup,\r\n    setTaskItem,\r\n} = uiSlice.actions;\r\n\r\nexport default uiSlice.reducer;\r\n","import { FunctionComponent } from \"react\";\r\n\r\ninterface ColorSelectorProps {\r\n    customOnClick: (color: string) => void;\r\n    initColor: string;\r\n}\r\n\r\nconst ColorSelector: FunctionComponent<ColorSelectorProps> = ({\r\n    customOnClick,\r\n    initColor,\r\n}) => {\r\n    const HandleOnSelectorClick: React.MouseEventHandler<HTMLDivElement> = (\r\n        ev\r\n    ) => {\r\n        const target: HTMLElement = ev.target as HTMLElement;\r\n        if (!target.classList.contains(\"color-box\")) {\r\n            return;\r\n        }\r\n\r\n        if (!target.parentElement) {\r\n            throw new Error(\"no parent ?\");\r\n        }\r\n\r\n        for (const colorBox of Array.from(target.parentElement.children)) {\r\n            colorBox.classList.remove(\"color-selected\");\r\n        }\r\n\r\n        target.classList.add(\"color-selected\");\r\n        customOnClick(target.classList[1]);\r\n    };\r\n\r\n    return (\r\n        <div onClick={HandleOnSelectorClick} className=\"color-selector\">\r\n            <div\r\n                className={`color-box red color-red ${\r\n                    initColor === \"red\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n            <div\r\n                className={`color-box blue color-blue ${\r\n                    initColor === \"blue\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n            <div\r\n                className={`color-box orange color-orange ${\r\n                    initColor === \"orange\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n            <div\r\n                className={`color-box green color-green ${\r\n                    initColor === \"green\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n            <div\r\n                className={`color-box pink color-pink ${\r\n                    initColor === \"pink\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorSelector;\r\n","import React, { useState } from \"react\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { addOneTask, ITask } from \"../redux/tasks\";\r\nimport { toggleAddTaskPopup } from \"../redux/ui\";\r\nimport ColorSelector from \"./ColorSelector\";\r\n\r\ninterface Inputs {\r\n    resume: string;\r\n    date: string;\r\n    details: string;\r\n}\r\n\r\nconst AddTaskFormContainer = () => {\r\n    const { register, handleSubmit } = useForm<Inputs>();\r\n\r\n    const { currentDate } = useSelector((state: RootState) => state.tasks);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [taskColor, setTaskColor] = useState(\"blue\");\r\n\r\n    // events\r\n\r\n    const newSubmitHandler: SubmitHandler<Inputs> = (data) => {\r\n        const newTask: ITask = {\r\n            resume: data.resume,\r\n            date: data.date,\r\n            details: data.details,\r\n            done: false,\r\n            color: taskColor,\r\n        };\r\n\r\n        dispatch(addOneTask(newTask));\r\n        dispatch(toggleAddTaskPopup());\r\n    };\r\n\r\n    // event\r\n\r\n    /**\r\n     * pour enlever la popup en cas de clique hors du formulaire\r\n     */\r\n    const onMouseDownContainer: React.MouseEventHandler<HTMLDivElement> = (\r\n        ev\r\n    ) => {\r\n        if ((ev.target as HTMLElement).id === \"addtask-form-container\") {\r\n            dispatch(toggleAddTaskPopup());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div onMouseDown={onMouseDownContainer} id=\"addtask-form-container\">\r\n            <form onSubmit={handleSubmit(newSubmitHandler)}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"nom de la tâche\"\r\n                    defaultValue=\"\"\r\n                    {...register(\"resume\")}\r\n                />\r\n                <input\r\n                    type=\"date\"\r\n                    defaultValue={currentDate}\r\n                    {...register(\"date\")}\r\n                />\r\n                <textarea\r\n                    placeholder=\"details de la tache\"\r\n                    defaultValue={\"\"}\r\n                    {...register(\"details\")}\r\n                ></textarea>\r\n                <ColorSelector\r\n                    customOnClick={(color) => {\r\n                        setTaskColor(color);\r\n                    }}\r\n                    initColor={taskColor}\r\n                />\r\n                <button type=\"submit\">Ajouter</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTaskFormContainer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nconst usersSliceInitState: {\r\n    isLogIn: boolean;\r\n    username: string;\r\n} = {\r\n    isLogIn: false,\r\n    username: \"\",\r\n};\r\n\r\nexport const usersSlice = createSlice({\r\n    name: \"users\",\r\n    initialState: usersSliceInitState,\r\n    reducers: {\r\n        setIsLogin: (state, action: PayloadAction<boolean>) => {\r\n            state.isLogIn = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setIsLogin } = usersSlice.actions;\r\n\r\nexport default usersSlice.reducer;\r\n","import { Button } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setLoginPopupOn, toggleAddTaskPopup } from \"../redux/ui\";\r\nimport { setIsLogin } from \"../redux/users\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <header>\r\n            <h1>Agenda App</h1>\r\n            <Button\r\n                variant=\"outlined\"\r\n                onClick={(e) => {\r\n                    dispatch(toggleAddTaskPopup());\r\n                }}\r\n            >\r\n                Ajouter une tâche\r\n            </Button>\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                onClick={(e) => {\r\n                    axios\r\n                        .get(\"/api/users/logout\")\r\n                        .then(() => {\r\n                            dispatch(setIsLogin(false));\r\n                            dispatch(setLoginPopupOn(true));\r\n                        })\r\n                        .catch((err) => {\r\n                            console.error(err);\r\n                        });\r\n                }}\r\n            >\r\n                Deconnexion\r\n            </Button>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setLoginPopupOn } from \"../redux/ui\";\r\nimport { setIsLogin } from \"../redux/users\";\r\n\r\ninterface LoginFormInputs {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nconst LoginPopupContainer = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [errorMess, setErrorMess] = useState(\"\");\r\n\r\n    const { register, handleSubmit } = useForm<LoginFormInputs>();\r\n\r\n    const loginFormSubmitHandler: SubmitHandler<LoginFormInputs> = async (\r\n        data\r\n    ) => {\r\n        try {\r\n            await axios.post(\"/api/login\", {\r\n                username: data.username,\r\n                password: data.password,\r\n            });\r\n\r\n            setErrorMess(\"\");\r\n            dispatch(setIsLogin(true));\r\n            dispatch(setLoginPopupOn(false));\r\n        } catch (error) {\r\n            setErrorMess(\r\n                \"Une erreur est survenue, est-ce la bonne combinaison login/mot de passe ?\"\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"login-popup-container\">\r\n            <form onSubmit={handleSubmit(loginFormSubmitHandler)}>\r\n                <p>\r\n                    Entrez un login et un mot de passe pré-existant pour accèder\r\n                    a vos tâches.\r\n                </p>\r\n                <p>\r\n                    Entrez un nouveau login et mot de passe pour créer votre\r\n                    agenda electronique.\r\n                </p>\r\n                <p>\r\n                    NOTE : les mots de passe ne sont pas chiffrés dans la base\r\n                    de donnée, pensez utiliser un mot de passe unique.\r\n                </p>\r\n\r\n                {errorMess}\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"LOGIN\"\r\n                    {...register(\"username\")}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"MOT DE PASSE\"\r\n                    {...register(\"password\")}\r\n                />\r\n                <button type=\"submit\">Go</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPopupContainer;\r\n","import React from \"react\";\r\nimport { FunctionComponent } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ITask } from \"../../redux/tasks\";\r\nimport { setTaskItem, toggleTaskItemPopup } from \"../../redux/ui\";\r\n\r\ninterface ScheduleItemProps {\r\n    task: ITask;\r\n}\r\n\r\n/**\r\n * représente une tâche (un seul item dans une colonne)\r\n */\r\nconst ScheduleItem: FunctionComponent<ScheduleItemProps> = ({ task }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleOnItemClick: React.MouseEventHandler<HTMLDivElement> = (ev) => {\r\n        dispatch(setTaskItem(task));\r\n        dispatch(toggleTaskItemPopup());\r\n    };\r\n\r\n    return (\r\n        <div\r\n            onClick={handleOnItemClick}\r\n            className={`schedule-item color-${task.color} ${\r\n                task.done && \"done\"\r\n            }`}\r\n        >\r\n            {task.resume}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleItem;\r\n","import { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ITask } from \"../../redux/tasks\";\r\nimport ScheduleItem from \"./ScheduleItem\";\r\n\r\ninterface ScheduleColumnProps {\r\n    dayIdentifier: string;\r\n    tasks: ITask[];\r\n}\r\n\r\nconst ScheduleColumn: FunctionComponent<ScheduleColumnProps> = ({\r\n    dayIdentifier,\r\n    tasks,\r\n}) => {\r\n    const [tasksCollapsed, setTasksCollapsed] = useState(false);\r\n    const { currentDate } = useSelector((state: RootState) => state.tasks);\r\n\r\n    useEffect(() => {\r\n        setTasksCollapsed(false);\r\n    }, [currentDate]);\r\n\r\n    return (\r\n        <div id={`${dayIdentifier}-column`} className=\"schedule-column\">\r\n            <div\r\n                onClick={(e) => {\r\n                    setTasksCollapsed(!tasksCollapsed);\r\n                }}\r\n                className={`schedule-column-header ${\r\n                    tasksCollapsed && \"collapsed\"\r\n                }`}\r\n            >\r\n                {dayIdentifier}\r\n            </div>\r\n            {!tasksCollapsed &&\r\n                tasks.map((task) => {\r\n                    return <ScheduleItem key={task.id} task={task} />;\r\n                })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleColumn;\r\n","import { Paper } from \"@material-ui/core\";\r\nimport dayjs from \"dayjs\";\r\nimport { FunctionComponent, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { fetchCurrentDateTasks } from \"../../redux/tasks\";\r\nimport ScheduleColumn from \"./ScheduleColumn\";\r\n\r\n/**\r\n * conteneur des colonnes de tâches\r\n */\r\nconst ScheduleContainer: FunctionComponent = () => {\r\n    const { currentTasks, currentDate } = useSelector((state: RootState) => {\r\n        return state.tasks;\r\n    });\r\n\r\n    const { isLogIn } = useSelector((state: RootState) => {\r\n        return state.users;\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        console.log(isLogIn);\r\n        if (isLogIn) {\r\n            dispatch(fetchCurrentDateTasks(currentDate));\r\n        }\r\n    }, [currentDate, isLogIn, dispatch]);\r\n\r\n    /**\r\n     * renvoi le petit (05/11) a coté du jour\r\n     */\r\n    const getDayInfo = (dayIndex: number): string => {\r\n        if (dayjs(`${currentDate.substring(0, 10)} 00:00`).day() !== 0) {\r\n            return `${dayjs(`${currentDate.substring(0, 10)} 00:00`)\r\n                .day(dayIndex)\r\n                .format(\"DD/MM\")}`;\r\n        } else {\r\n            return `${dayjs(`${currentDate.substring(0, 10)} 00:00`)\r\n                .subtract(1, \"day\")\r\n                .day(dayIndex)\r\n                .format(\"DD/MM\")}`;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Paper variant=\"outlined\" id=\"schedule-container\">\r\n            <ScheduleColumn\r\n                dayIdentifier={`Lundi ${getDayInfo(1)}`}\r\n                tasks={currentTasks.filter((task) => {\r\n                    return (\r\n                        dayjs(`${task.date.substring(0, 10)} 00:00`).day() === 1\r\n                    );\r\n                })}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Mardi ${getDayInfo(2)}`}\r\n                tasks={currentTasks.filter((task) => {\r\n                    return (\r\n                        dayjs(`${task.date.substring(0, 10)} 00:00`).day() === 2\r\n                    );\r\n                })}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Mercredi ${getDayInfo(3)}`}\r\n                tasks={currentTasks.filter(\r\n                    (task) =>\r\n                        dayjs(`${task.date.substring(0, 10)} 00:00`).day() === 3\r\n                )}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Jeudi ${getDayInfo(4)}`}\r\n                tasks={currentTasks.filter(\r\n                    (task) =>\r\n                        dayjs(`${task.date.substring(0, 10)} 00:00`).day() === 4\r\n                )}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Vendredi ${getDayInfo(5)}`}\r\n                tasks={currentTasks.filter(\r\n                    (task) =>\r\n                        dayjs(`${task.date.substring(0, 10)} 00:00`).day() === 5\r\n                )}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Autre`}\r\n                tasks={currentTasks.filter(\r\n                    (task) =>\r\n                        dayjs(`${task.date.substring(0, 10)} 00:00`).day() ===\r\n                            6 ||\r\n                        dayjs(`${task.date.substring(0, 10)} 00:00`).day() === 0\r\n                )}\r\n            />\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default ScheduleContainer;\r\n","import { Button } from \"@material-ui/core\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport dayjs from \"dayjs\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { setDate } from \"../../redux/tasks\";\r\nimport { AiOutlineArrowRight, AiOutlineArrowLeft } from \"react-icons/ai\";\r\n\r\n/**\r\n * navigateur (changer semaine, avance, reculer, etc)\r\n */\r\nconst ScheduleNavigator = () => {\r\n    const { currentDate } = useSelector((state: RootState) => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div id=\"schedule-navigator\">\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={(e) => {\r\n                    dispatch(\r\n                        setDate(\r\n                            dayjs(`${currentDate.substring(0, 10)} 00:00`)\r\n                                .subtract(7, \"days\")\r\n                                .format(\"YYYY-MM-DD\")\r\n                        )\r\n                    );\r\n                }}\r\n            >\r\n                <AiOutlineArrowLeft />\r\n            </Button>\r\n\r\n            <DatePicker\r\n                format=\"DD/MM/YYYY\"\r\n                value={dayjs(currentDate)}\r\n                onChange={(targetdate) => {\r\n                    // si la date est invalide, skip\r\n                    if (!targetdate) {\r\n                        return;\r\n                    }\r\n\r\n                    dispatch(setDate(targetdate.format(\"YYYY-MM-DD\")));\r\n                }}\r\n            />\r\n\r\n            <Button\r\n                onClick={(e) => {\r\n                    dispatch(setDate(dayjs(Date.now()).format(\"YYYY-MM-DD\")));\r\n                }}\r\n                variant=\"contained\"\r\n            >\r\n                Semaine actuelle\r\n            </Button>\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={(e) => {\r\n                    dispatch(\r\n                        setDate(\r\n                            dayjs(`${currentDate.substring(0, 10)} 00:00`)\r\n                                .add(7, \"days\")\r\n                                .format(\"YYYY-MM-DD\")\r\n                        )\r\n                    );\r\n                }}\r\n            >\r\n                <AiOutlineArrowRight />\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleNavigator;\r\n","import dayjs from \"dayjs\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { updateOneTask } from \"../redux/tasks\";\r\nimport { toggleTaskItemPopup } from \"../redux/ui\";\r\nimport ColorSelector from \"./ColorSelector\";\r\n\r\nconst TaskItemPopupContainer = () => {\r\n    const { taskItemPopup } = useSelector((state: RootState) => state.ui);\r\n    const dispatch = useDispatch();\r\n\r\n    // form states\r\n    const [taskResume, setTaskResume] = useState(taskItemPopup.resume);\r\n    const [taskDate, setTaskDate] = useState(\r\n        dayjs(`${taskItemPopup.date.substring(0, 10)} 00:00`).format(\r\n            \"YYYY-MM-DD\"\r\n        )\r\n    );\r\n    const [taskDetails, setTaskDetails] = useState(taskItemPopup.details);\r\n    const [taskColor, setTaskColor] = useState(taskItemPopup.color);\r\n    const [taskDone, setTaskDone] = useState(taskItemPopup.done);\r\n\r\n    /**\r\n     * pour enlever la popup en cas de clique hors du formulaire\r\n     */\r\n    const onMouseDownContainer: React.MouseEventHandler<HTMLDivElement> = (\r\n        ev\r\n    ) => {\r\n        if ((ev.target as HTMLElement).id === \"taskitem-popup-container\") {\r\n            dispatch(toggleTaskItemPopup());\r\n        }\r\n    };\r\n\r\n    // form submit event\r\n    const HandleFormSubmit: React.FormEventHandler<HTMLFormElement> = (ev) => {\r\n        ev.preventDefault();\r\n\r\n        dispatch(\r\n            updateOneTask({\r\n                id: taskItemPopup.id,\r\n                color: taskColor,\r\n                date: taskDate,\r\n                details: taskDetails,\r\n                done: taskDone,\r\n                resume: taskResume,\r\n            })\r\n        );\r\n        dispatch(toggleTaskItemPopup());\r\n    };\r\n\r\n    return (\r\n        <div onMouseDown={onMouseDownContainer} id=\"taskitem-popup-container\">\r\n            <form onSubmit={HandleFormSubmit} id=\"taskitem-popup\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"resume\"\r\n                    placeholder=\"nom de la tâche\"\r\n                    value={taskResume}\r\n                    onChange={(e) => setTaskResume(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    value={taskDate}\r\n                    onChange={(e) => setTaskDate(e.target.value)}\r\n                />\r\n                <textarea\r\n                    name=\"details\"\r\n                    placeholder=\"details de la tache\"\r\n                    value={taskDetails}\r\n                    onChange={(e) => setTaskDetails(e.target.value)}\r\n                ></textarea>\r\n                <ColorSelector\r\n                    customOnClick={(color) => {\r\n                        setTaskColor(color);\r\n                    }}\r\n                    initColor={taskColor}\r\n                />\r\n                <div>\r\n                    <label htmlFor=\"done\">Fini : </label>\r\n                    <input\r\n                        onChange={(e) => setTaskDone(e.target.checked)}\r\n                        checked={taskDone}\r\n                        type=\"checkbox\"\r\n                        name=\"done\"\r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Modifier</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskItemPopupContainer;\r\n","import axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.sass\";\nimport AddTaskFormContainer from \"./components/AddTaskFormContainer\";\nimport Header from \"./components/Header\";\nimport LoginPopupContainer from \"./components/LoginPopupContainer\";\nimport ScheduleContainer from \"./components/schedule/ScheduleContainer\";\nimport ScheduleNavigator from \"./components/schedule/ScheduleNavigator\";\nimport TaskItemPopupContainer from \"./components/TaskItemPopupContainer\";\nimport { RootState } from \"./redux/store\";\nimport { setLoginPopupOn } from \"./redux/ui\";\nimport { setIsLogin } from \"./redux/users\";\n\nfunction App() {\n    const dispatch = useDispatch();\n\n    const { addTaskPopupOn, taskItemPopupOn, loginPopupOn } = useSelector(\n        (state: RootState) => {\n            return state.ui;\n        }\n    );\n\n    // Checker s'il existe un cookie utilisateur, si oui\n    // - setter l'utilisateur courant dans les states, sinon\n    // - afficher le formulaire de login.\n    useEffect(() => {\n        const checkIfConnected = async () => {\n            const isLogin = (await axios.get(\"/api/users/islogin\")).data;\n\n            if (isLogin) {\n                dispatch(setLoginPopupOn(false));\n                dispatch(setIsLogin(true));\n            } else {\n                dispatch(setLoginPopupOn(true));\n                dispatch(setIsLogin(false));\n            }\n        };\n\n        checkIfConnected();\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            {loginPopupOn && <LoginPopupContainer />}\n            {/* container-popup pour le formulaire d'ajout de tâche */}\n            {addTaskPopupOn && <AddTaskFormContainer />}\n            {/* container-popup pour un item selectionné */}\n            {taskItemPopupOn && <TaskItemPopupContainer />}\n\n            <div id=\"main-container\">\n                <Header />\n                <ScheduleNavigator />\n                <ScheduleContainer />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./tasks\";\r\nimport uiReducer from \"./ui\";\r\nimport usersReducer from \"./users\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        ui: uiReducer,\r\n        users: usersReducer,\r\n    },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport default store;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport dayjsUtils from \"@date-io/dayjs\";\n\nReactDOM.render(\n    // <React.StrictMode>\n    <Provider store={store}>\n        <MuiPickersUtilsProvider utils={dayjsUtils}>\n            <App />\n        </MuiPickersUtilsProvider>\n    </Provider>,\n    // </React.StrictMode>\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}