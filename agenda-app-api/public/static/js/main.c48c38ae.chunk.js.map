{"version":3,"sources":["redux/tasks.ts","redux/ui.ts","components/ColorSelector.tsx","components/AddTaskFormContainer.tsx","components/Header.tsx","components/schedule/ScheduleItem.tsx","components/schedule/ScheduleColumn.tsx","components/schedule/ScheduleContainer.tsx","components/schedule/ScheduleNavigator.tsx","components/TaskItemPopupContainer.tsx","App.tsx","redux/store.ts","reportWebVitals.ts","index.tsx"],"names":["tasksSliceInitialState","currentDate","dayjs","format","currentTasks","fetchCurrentDateTasks","createAsyncThunk","dateString","a","console","log","axios","get","res","data","addOneTask","task","post","updateOneTask","id","Error","patch","tasksSlice","createSlice","name","initialState","reducers","setDate","state","action","payload","extraReducers","builder","addCase","fulfilled","taskPayload","isSame","date","push","payloadTask","map","actions","uiSlice","addTaskPopupOn","taskItemPopupOn","taskItemPopup","resume","color","details","done","toggleAddTaskPopup","toggleTaskItemPopup","setTaskItem","ColorSelector","customOnClick","initColor","onClick","ev","target","classList","contains","parentElement","Array","from","children","remove","add","className","AddTaskFormContainer","useSelector","tasks","dispatch","useDispatch","useState","taskResume","setTaskResume","taskDate","setTaskDate","taskDetails","setTaskDetails","taskColor","setTaskColor","onMouseDown","onSubmit","preventDefault","type","placeholder","value","onChange","e","Header","ScheduleItem","ScheduleColumn","dayIdentifier","tasksCollapsed","setTasksCollapsed","useEffect","ScheduleContainer","getDayInfo","dayIndex","day","filter","ScheduleNavigator","subtract","isNaN","Date","parse","now","TaskItemPopupContainer","ui","taskDone","setTaskDone","htmlFor","checked","App","store","configureStore","reducer","tasksReducer","uiReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c48c38ae.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport interface ITask {\r\n    id?: number;\r\n    date: string;\r\n    details: string;\r\n    resume: string;\r\n    color: string;\r\n    done: boolean;\r\n}\r\n\r\nconst tasksSliceInitialState: {\r\n    currentDate: string;\r\n    currentTasks: ITask[];\r\n} = {\r\n    currentDate: dayjs().format(\"YYYY-MM-DD\"),\r\n    currentTasks: [],\r\n};\r\n\r\nexport const fetchCurrentDateTasks = createAsyncThunk(\r\n    \"tasks/fetchCurrentDateTasks\",\r\n    async (dateString: string) => {\r\n        console.log(\"api call for fetch tasks\");\r\n\r\n        const res = await axios.get(\r\n            `/api/tasks/week?date=${dayjs(dateString).format(\"YYYY-MM-DD\")}`\r\n        );\r\n\r\n        console.log(res.data);\r\n\r\n        return res.data;\r\n    }\r\n);\r\n\r\nexport const addOneTask = createAsyncThunk(\r\n    \"tasks/addOneTask\",\r\n    async (task: ITask) => {\r\n        console.log(\"api call for add one task\");\r\n\r\n        const res = await axios.post(`/api/tasks`, task);\r\n\r\n        return res.data;\r\n    }\r\n);\r\n\r\nexport const updateOneTask = createAsyncThunk(\r\n    \"tasks/updateOneTask\",\r\n    async (task: ITask) => {\r\n        if (!task.id) {\r\n            throw new Error(\"ITask objects needed ID for update request\");\r\n        }\r\n\r\n        const res = await axios.patch(\"/api/tasks\", task);\r\n        return res.data;\r\n    }\r\n);\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: tasksSliceInitialState,\r\n    reducers: {\r\n        setDate: (state, action: PayloadAction<string>) => {\r\n            state.currentDate = action.payload;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchCurrentDateTasks.fulfilled, (state, action) => {\r\n            state.currentTasks = action.payload;\r\n        });\r\n\r\n        builder.addCase(addOneTask.fulfilled, (state, action) => {\r\n            const taskPayload: ITask = action.payload;\r\n\r\n            // si la tache ajoutée est de la même semaine que nous, alors\r\n            // - on l'ajoute dans currentTasks\r\n\r\n            if (dayjs(state.currentDate).isSame(taskPayload.date, \"week\")) {\r\n                state.currentTasks.push(taskPayload);\r\n            }\r\n        });\r\n\r\n        builder.addCase(updateOneTask.fulfilled, (state, action): any => {\r\n            const payloadTask: ITask = action.payload;\r\n            state.currentTasks = state.currentTasks.map((task) => {\r\n                if (task.id === payloadTask.id) {\r\n                    return payloadTask;\r\n                }\r\n\r\n                return task;\r\n            });\r\n        });\r\n    },\r\n});\r\n\r\nexport const { setDate } = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { ITask } from \"./tasks\";\r\n\r\nconst uiSliceInitialstate: {\r\n    addTaskPopupOn: boolean;\r\n    taskItemPopupOn: boolean;\r\n    taskItemPopup: ITask;\r\n} = {\r\n    addTaskPopupOn: false,\r\n    taskItemPopupOn: false,\r\n    taskItemPopup: {\r\n        resume: \"none\",\r\n        color: \"none\",\r\n        date: \"none\",\r\n        details: \"none\",\r\n        done: false,\r\n    },\r\n};\r\n\r\nexport const uiSlice = createSlice({\r\n    name: \"ui\",\r\n    initialState: uiSliceInitialstate,\r\n    reducers: {\r\n        toggleAddTaskPopup: (state) => {\r\n            state.addTaskPopupOn = !state.addTaskPopupOn;\r\n        },\r\n        toggleTaskItemPopup: (state) => {\r\n            state.taskItemPopupOn = !state.taskItemPopupOn;\r\n        },\r\n        setTaskItem: (state, action: PayloadAction<ITask>) => {\r\n            state.taskItemPopup = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { toggleAddTaskPopup, toggleTaskItemPopup, setTaskItem } =\r\n    uiSlice.actions;\r\n\r\nexport default uiSlice.reducer;\r\n","import { FunctionComponent } from \"react\";\r\n\r\ninterface ColorSelectorProps {\r\n    customOnClick: (color: string) => void;\r\n    initColor: string;\r\n}\r\n\r\nconst ColorSelector: FunctionComponent<ColorSelectorProps> = ({\r\n    customOnClick,\r\n    initColor,\r\n}) => {\r\n    const HandleOnSelectorClick: React.MouseEventHandler<HTMLDivElement> = (\r\n        ev\r\n    ) => {\r\n        const target: HTMLElement = ev.target as HTMLElement;\r\n        if (!target.classList.contains(\"color-box\")) {\r\n            return;\r\n        }\r\n\r\n        if (!target.parentElement) {\r\n            throw new Error(\"no parent ?\");\r\n        }\r\n\r\n        for (const colorBox of Array.from(target.parentElement.children)) {\r\n            colorBox.classList.remove(\"color-selected\");\r\n        }\r\n\r\n        target.classList.add(\"color-selected\");\r\n        customOnClick(target.classList[1]);\r\n    };\r\n\r\n    return (\r\n        <div onClick={HandleOnSelectorClick} className=\"color-selector\">\r\n            <div\r\n                className={`color-box red color-red ${\r\n                    initColor === \"red\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n            <div\r\n                className={`color-box blue color-blue ${\r\n                    initColor === \"blue\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n            <div\r\n                className={`color-box orange color-orange ${\r\n                    initColor === \"orange\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n            <div\r\n                className={`color-box green color-green ${\r\n                    initColor === \"green\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n            <div\r\n                className={`color-box pink color-pink ${\r\n                    initColor === \"pink\" && \"color-selected\"\r\n                } `}\r\n            ></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorSelector;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { addOneTask, ITask } from \"../redux/tasks\";\r\nimport { toggleAddTaskPopup } from \"../redux/ui\";\r\nimport ColorSelector from \"./ColorSelector\";\r\n\r\nconst AddTaskFormContainer = () => {\r\n    const { currentDate } = useSelector((state: RootState) => state.tasks);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // form states\r\n    const [taskResume, setTaskResume] = useState(\"\");\r\n    const [taskDate, setTaskDate] = useState(currentDate);\r\n    const [taskDetails, setTaskDetails] = useState(\"\");\r\n    const [taskColor, setTaskColor] = useState(\"blue\");\r\n\r\n    // events\r\n    const onFormSubmit: React.FormEventHandler<HTMLFormElement> = (ev) => {\r\n        ev.preventDefault();\r\n        const newTask: ITask = {\r\n            resume: taskResume,\r\n            date: taskDate,\r\n            details: taskDetails,\r\n            done: false,\r\n            color: taskColor,\r\n        };\r\n\r\n        dispatch(addOneTask(newTask));\r\n        dispatch(toggleAddTaskPopup());\r\n    };\r\n\r\n    // event\r\n\r\n    /**\r\n     * pour enlever la popup en cas de clique hors du formulaire\r\n     */\r\n    const onMouseDownContainer: React.MouseEventHandler<HTMLDivElement> = (\r\n        ev\r\n    ) => {\r\n        if ((ev.target as HTMLElement).id === \"addtask-form-container\") {\r\n            dispatch(toggleAddTaskPopup());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div onMouseDown={onMouseDownContainer} id=\"addtask-form-container\">\r\n            <form onSubmit={onFormSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"resume\"\r\n                    placeholder=\"nom de la tâche\"\r\n                    value={taskResume}\r\n                    onChange={(e) => setTaskResume(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    value={taskDate}\r\n                    onChange={(e) => setTaskDate(e.target.value)}\r\n                />\r\n                <textarea\r\n                    name=\"details\"\r\n                    placeholder=\"details de la tache\"\r\n                    value={taskDetails}\r\n                    onChange={(e) => setTaskDetails(e.target.value)}\r\n                ></textarea>\r\n                <ColorSelector\r\n                    customOnClick={(color) => {\r\n                        setTaskColor(color);\r\n                    }}\r\n                    initColor={taskColor}\r\n                />\r\n                <button type=\"submit\">Ajouter</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTaskFormContainer;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { toggleAddTaskPopup } from \"../redux/ui\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <header>\r\n            <h1>Agenda App</h1>\r\n            <button\r\n                onClick={(e) => {\r\n                    dispatch(toggleAddTaskPopup());\r\n                }}\r\n            >\r\n                Ajouter une tâche\r\n            </button>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { FunctionComponent } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ITask } from \"../../redux/tasks\";\r\nimport { setTaskItem, toggleTaskItemPopup } from \"../../redux/ui\";\r\n\r\ninterface ScheduleItemProps {\r\n    task: ITask;\r\n}\r\n\r\n/**\r\n * représente une tâche (un seul item dans une colonne)\r\n */\r\nconst ScheduleItem: FunctionComponent<ScheduleItemProps> = ({ task }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleOnItemClick: React.MouseEventHandler<HTMLDivElement> = (ev) => {\r\n        dispatch(setTaskItem(task));\r\n        dispatch(toggleTaskItemPopup());\r\n    };\r\n\r\n    return (\r\n        <div\r\n            onClick={handleOnItemClick}\r\n            className={`schedule-item color-${task.color} ${\r\n                task.done && \"done\"\r\n            }`}\r\n        >\r\n            {task.resume}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleItem;\r\n","import { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ITask } from \"../../redux/tasks\";\r\nimport ScheduleItem from \"./ScheduleItem\";\r\n\r\ninterface ScheduleColumnProps {\r\n    dayIdentifier: string;\r\n    tasks: ITask[];\r\n}\r\n\r\nconst ScheduleColumn: FunctionComponent<ScheduleColumnProps> = ({\r\n    dayIdentifier,\r\n    tasks,\r\n}) => {\r\n    const [tasksCollapsed, setTasksCollapsed] = useState(false);\r\n    const { currentDate } = useSelector((state: RootState) => state.tasks);\r\n\r\n    useEffect(() => {\r\n        setTasksCollapsed(false);\r\n    }, [currentDate]);\r\n\r\n    return (\r\n        <div id={`${dayIdentifier}-column`} className=\"schedule-column\">\r\n            <div\r\n                onClick={(e) => {\r\n                    setTasksCollapsed(!tasksCollapsed);\r\n                }}\r\n                className={`schedule-column-header ${\r\n                    tasksCollapsed && \"collapsed\"\r\n                }`}\r\n            >\r\n                {dayIdentifier}\r\n            </div>\r\n            {!tasksCollapsed &&\r\n                tasks.map((task) => {\r\n                    return <ScheduleItem key={task.id} task={task} />;\r\n                })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleColumn;\r\n","import dayjs from \"dayjs\";\r\nimport { FunctionComponent, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { fetchCurrentDateTasks } from \"../../redux/tasks\";\r\nimport ScheduleColumn from \"./ScheduleColumn\";\r\n\r\n/**\r\n * conteneur des colonnes de tâches\r\n */\r\nconst ScheduleContainer: FunctionComponent = () => {\r\n    const { currentTasks, currentDate } = useSelector((state: RootState) => {\r\n        return state.tasks;\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCurrentDateTasks(currentDate));\r\n    }, [currentDate, dispatch]);\r\n\r\n    /**\r\n     * renvoi le petit (05/11) a coté du jour\r\n     */\r\n    const getDayInfo = (dayIndex: number): string => {\r\n        return `${dayjs(currentDate).day(dayIndex).format(\"DD\")}/${dayjs(\r\n            currentDate\r\n        )\r\n            .day(dayIndex)\r\n            .format(\"MM\")}`;\r\n    };\r\n\r\n    return (\r\n        <div id=\"schedule-container\">\r\n            <ScheduleColumn\r\n                dayIdentifier={`Lundi ${getDayInfo(1)}`}\r\n                tasks={currentTasks.filter((task) => {\r\n                    return dayjs(task.date).day() === 1;\r\n                })}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Mardi ${getDayInfo(2)}`}\r\n                tasks={currentTasks.filter((task) => {\r\n                    return dayjs(task.date).day() === 2;\r\n                })}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Mercredi ${getDayInfo(3)}`}\r\n                tasks={currentTasks.filter(\r\n                    (task) => dayjs(task.date).day() === 3\r\n                )}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Jeudi ${getDayInfo(4)}`}\r\n                tasks={currentTasks.filter(\r\n                    (task) => dayjs(task.date).day() === 4\r\n                )}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Vendredi ${getDayInfo(5)}`}\r\n                tasks={currentTasks.filter(\r\n                    (task) => dayjs(task.date).day() === 5\r\n                )}\r\n            />\r\n            <ScheduleColumn\r\n                dayIdentifier={`Autre`}\r\n                tasks={currentTasks.filter(\r\n                    (task) =>\r\n                        dayjs(task.date).day() === 6 ||\r\n                        dayjs(task.date).day() === 0\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleContainer;\r\n","import dayjs from \"dayjs\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { setDate } from \"../../redux/tasks\";\r\n\r\n/**\r\n * navigateur (changer semaine, avance, reculer, etc)\r\n */\r\nconst ScheduleNavigator = () => {\r\n    const { currentDate } = useSelector((state: RootState) => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div id=\"schedule-navigator\">\r\n            <button\r\n                onClick={(e) => {\r\n                    dispatch(\r\n                        setDate(\r\n                            dayjs(currentDate)\r\n                                .subtract(7, \"days\")\r\n                                .format(\"YYYY-MM-DD\")\r\n                        )\r\n                    );\r\n                }}\r\n            >\r\n                ←\r\n            </button>\r\n            <input\r\n                onChange={(e) => {\r\n                    // si la date est invalide, skip\r\n                    if (isNaN(Date.parse(e.target.value))) {\r\n                        return;\r\n                    }\r\n\r\n                    dispatch(setDate(e.target.value));\r\n                }}\r\n                value={currentDate}\r\n                type=\"date\"\r\n            />\r\n            <button\r\n                onClick={(e) => {\r\n                    dispatch(setDate(dayjs(Date.now()).format(\"YYYY-MM-DD\")));\r\n                }}\r\n            >\r\n                Semaine actuelle\r\n            </button>\r\n            <button\r\n                onClick={(e) => {\r\n                    dispatch(\r\n                        setDate(\r\n                            dayjs(currentDate)\r\n                                .add(7, \"days\")\r\n                                .format(\"YYYY-MM-DD\")\r\n                        )\r\n                    );\r\n                }}\r\n            >\r\n                →\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleNavigator;\r\n","import dayjs from \"dayjs\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { updateOneTask } from \"../redux/tasks\";\r\nimport { toggleTaskItemPopup } from \"../redux/ui\";\r\nimport ColorSelector from \"./ColorSelector\";\r\n\r\nconst TaskItemPopupContainer = () => {\r\n    const { taskItemPopup } = useSelector((state: RootState) => state.ui);\r\n    const dispatch = useDispatch();\r\n\r\n    // form states\r\n    const [taskResume, setTaskResume] = useState(taskItemPopup.resume);\r\n    const [taskDate, setTaskDate] = useState(\r\n        dayjs(taskItemPopup.date).format(\"YYYY-MM-DD\")\r\n    );\r\n    const [taskDetails, setTaskDetails] = useState(taskItemPopup.details);\r\n    const [taskColor, setTaskColor] = useState(taskItemPopup.color);\r\n    const [taskDone, setTaskDone] = useState(taskItemPopup.done);\r\n\r\n    /**\r\n     * pour enlever la popup en cas de clique hors du formulaire\r\n     */\r\n    const onMouseDownContainer: React.MouseEventHandler<HTMLDivElement> = (\r\n        ev\r\n    ) => {\r\n        if ((ev.target as HTMLElement).id === \"taskitem-popup-container\") {\r\n            dispatch(toggleTaskItemPopup());\r\n        }\r\n    };\r\n\r\n    // form submit event\r\n    const HandleFormSubmit: React.FormEventHandler<HTMLFormElement> = (ev) => {\r\n        ev.preventDefault();\r\n\r\n        dispatch(\r\n            updateOneTask({\r\n                id: taskItemPopup.id,\r\n                color: taskColor,\r\n                date: taskDate,\r\n                details: taskDetails,\r\n                done: taskDone,\r\n                resume: taskResume,\r\n            })\r\n        );\r\n        dispatch(toggleTaskItemPopup());\r\n    };\r\n\r\n    return (\r\n        <div onClick={onMouseDownContainer} id=\"taskitem-popup-container\">\r\n            <form onSubmit={HandleFormSubmit} id=\"taskitem-popup\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"resume\"\r\n                    placeholder=\"nom de la tâche\"\r\n                    value={taskResume}\r\n                    onChange={(e) => setTaskResume(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    value={taskDate}\r\n                    onChange={(e) => setTaskDate(e.target.value)}\r\n                />\r\n                <textarea\r\n                    name=\"details\"\r\n                    placeholder=\"details de la tache\"\r\n                    value={taskDetails}\r\n                    onChange={(e) => setTaskDetails(e.target.value)}\r\n                ></textarea>\r\n                <ColorSelector\r\n                    customOnClick={(color) => {\r\n                        setTaskColor(color);\r\n                    }}\r\n                    initColor={taskColor}\r\n                />\r\n                <div>\r\n                    <label htmlFor=\"done\">Fini : </label>\r\n                    <input\r\n                        onChange={(e) => setTaskDone(e.target.checked)}\r\n                        checked={taskDone}\r\n                        type=\"checkbox\"\r\n                        name=\"done\"\r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Modifier</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskItemPopupContainer;\r\n","import { useSelector } from \"react-redux\";\nimport \"./App.sass\";\nimport AddTaskFormContainer from \"./components/AddTaskFormContainer\";\nimport Header from \"./components/Header\";\nimport ScheduleContainer from \"./components/schedule/ScheduleContainer\";\nimport ScheduleNavigator from \"./components/schedule/ScheduleNavigator\";\nimport TaskItemPopupContainer from \"./components/TaskItemPopupContainer\";\nimport { RootState } from \"./redux/store\";\n\nfunction App() {\n    const { addTaskPopupOn, taskItemPopupOn } = useSelector(\n        (state: RootState) => {\n            return state.ui;\n        }\n    );\n\n    return (\n        <div className=\"App\">\n            {/* container-popup pour le formulaire d'ajout de tâche */}\n            {addTaskPopupOn && <AddTaskFormContainer />}\n            {/* container-popup pour un item selectionné */}\n            {taskItemPopupOn && <TaskItemPopupContainer />}\n\n            <div id=\"main-container\">\n                <Header />\n                <ScheduleNavigator />\n                <ScheduleContainer />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./tasks\";\r\nimport uiReducer from \"./ui\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        ui: uiReducer,\r\n    },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport default store;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}